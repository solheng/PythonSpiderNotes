Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Flask

## 简介与准备
> collapsed=`true`


### 概念

#### WEB应用程序

#### web框架

### flask

#### wekzeug工具箱

#### jinja2模板引擎

### 安装

#### 虚拟环境

#### pip install flask

## 快速示例
> collapsed=`true`


### 基础知识

#### http

#### MVC

##### model:程序功能实现算法

##### view：界面视图

##### controller：负责转发请求，对请求进行处理

#### 示例站点

## 核心对象

### Application Context

#### 概述：程序上下文（核心对象），实现wsgi程序，<br/>       可注册视图函数，地址规则，模板匹配等

#### 功能：传递功能至请求上下文

#### API
> collapsed=`true`


##### 构造函数flask\.Flask\(\.\.\.\)
> collapsed=`true`


###### import\_name

####### 单模块Flask\(\_\_name\_\_\)

####### 使用包名Flask\('yourapplication'\)

###### static\_url\_path 指定非默认 static\_folder

###### template\_folder 模板文件夹

##### 属性

###### \.name 名称

###### \.config 配置

###### \.debug 是否启用调试

###### \.secret\_key 安全码

###### \.\.\.

##### 装饰器

###### \.route\(\) 路由定制地址规则

##### 方法
> collapsed=`true`


###### \.add\_url\_rule\(\) 添加地址规则

###### \.test\_request\_context\(url\) 创建请求上下文

###### \.run\(\.\.\.\) 运行

####### host=主机

####### port=端口

####### debug=是否启用调试

### Request

#### 概述：包含当前请求上下文 类型：flask\.Requset

#### api     获取请求数据属性

##### \.method 请求方法

##### \.path 路径     /page\.html

##### \.full\_path    page\.html?name=tom

##### \.url    http://www\.xuepy\.com/app/page\.com?name=tom

##### \.args    查询字符串 MultiDict类型

##### \.form    表单数据

##### \.values    表单及查询字符串

##### \.files    上传文件对象

##### \.cookies

##### \.\.\.

### Response

#### 概述：视图函数返回响应对象

##### 如果类型正确，视图函数自动包装结果为响应

##### 返回tuple    \(rsp,status,headers\)

##### 总是返回响应对象

#### 类型： flask\.Response

#### API

##### 构造函数 Response\(\.\.\.\)
> collapsed=`true`


###### headers=头部信息

###### status=字符串状态文本

###### status\_code=整型状态码

###### mimetype=响应类型

####### text/html

####### application/json

####### text\.plain

####### \.\.\.

##### 构造响应实例 make\_response\(\.\.\.\)

##### 方法    \.set\_cookie\(\)

## 视图

### 视图函数

#### 返回响应

#### 响应结果

##### 网页

###### Content\-type:text/html

##### 纯文本

###### Content\-type:text/plain

##### 模板呈现

##### JSON

###### Content\-type:Application/json

##### 转跳

###### flask\.redirect\(url\)

### 路由规则
> collapsed=`true`


#### app\.route\(\) 装饰器

#### app\.add\_url\_rule\(\) 添加地址规则

##### rule = '/地址规则'

##### endpoint='终结点'

##### view\_func=视图函数

##### \*\*options 选项

###### defaults=\{'key':value\}

###### methods=\['GET','POST'\]

### 视图选项
> collapsed=`true`


#### 动态参数

##### 地址栏参数

##### 动态url参数

###### \<string:arg\>

###### \<int:arg\>

###### \<float:arg\>

###### \<path:arg\>

###### \<any:arg\>

###### \<uuid:arg\>

#### http方法

##### GET

##### POST

### 地址反向解析<br/>flask通过endpoint<br/>找到viewfunction
> collapsed=`true`


#### flask\.url\_for\('endpoint',\*\*options\)

#### flask\.url\_for\('blueprint\.endpoint',\*\*options\)

## 数据库管理操作

### 基于数据库的API

### ORM

#### 概念
> collapsed=`true`


##### object relational mapping 对象关系映射

##### 一种程序设计技术

##### 用于实现面向对象编程语言里不同类型系统的数据之间的转换

##### 从效果上说，它创建了一个可以编程语言里使用的“虚拟对象数据库”

#### SQLAlchemy
> collapsed=`true`


##### 安装 pip install sqlalchemy

##### 映射申明

##### 数据库连接

##### 创建方案模式

##### 会话上下文创建

##### 对象管理/数据增删改查

#### Flask\-SQLAlchemy

##### 安装 pip install flask\-sqlalchemy

##### 配置
> collapsed=`true`


###### SQLALCHEMY\_DATABASE\_URL

####### MYSQL

######## mysql://name:pwd@host/database

######## mysql\+pymysql://name:pwd@host/database

###### SQLALCHEMY\_TRACK\_MODIFICATIONS 是否跟踪修改并发出信息 默认None

###### SQLALCHEMY\_ECHO 是否打印调试信息

###### SQLALCHEMY\_RECORD\_QURIES 是否记录查询

###### SQLALCHEMY\_POOL\_SIZE 数据库连接池 默认5

###### SQLALCHEMY\_POOL\_RECYCLE 连接自动回收秒数，MYSQL必须

##### 核心对象
> collapsed=`true`


###### flask\_sqlalchemy\.SQLAlchemy

##### 模型申明
> collapsed=`true`


###### 模型基类 db\.Model

###### 列 db\.Column\(db\.类型，选项\.\.\.\)

####### 类型

######## integer 整型

######## String （size）

######## Text

######## Date

######## DateTime

######## Time

######## Inteval

######## Float

######## Numeric

######## Boolean

######## \.\.\.

###### 关系
> collapsed=`true`


####### 一对多

######## relationship\(\) 函数表达

######### backref 反向申明属性

######### lazy 延迟加载

######## ForeignKey 申明外键

####### 多对多

######## 使用助手表定义关系

##### 对象数据操作
> collapsed=`true`


###### 数据准备

###### db\.session 会话上下文

####### \.add\(实例\)

####### \.add\(实例序列\)

####### \.delete\(实例\)

####### \.commit\(\)

###### CRUD

##### 数据查询
> collapsed=`true`


###### query 查询对象

####### Model\.query

####### db\.session\.query\(Model\)

###### 方法

####### \.all\(\) 获取所有查询结果列表

######## 不写all方法是一个迭代器

####### \.order\_by\(sqlalchemy\.desc\(排序字段\)\) 排序

####### \.offset\(n\) 偏移跳过

####### \.limit\(n\) 限制数据

####### \.filter\_by\(\)

####### \.filter\(\)
> collapsed=`true`


######## == 相等

######## \!= 不等

######## like\('%x%'\) 模糊查询

######## in\_\(序列\) 不包含

######## ～in\_\(序列\) 不包含

######## 是否为空

######### == None 为空

######### is\_\(None\) 为空

######### \!= None 不为空

######### isnot\(None\) 不为空

######## and 与

######### 条件1，条件2

######## or 或

######### sqlalchemy\.or\_（条件1，条件2）

####### \.first\(\) 第一条结果

####### \.one\(\) 匹配单条，空或者多条时抛异常

####### \.one\_or\_none\(\) 一条或返回空

####### \.get\(主键值\) 单条或空

####### 聚集函数
> collapsed=`true`


######## sqlalchemy\.func

######### \.max

######### \.min

######### \.avg

######### \.count

######## \.select\_from\(对象\)\.scalar\(\) 获取结果第一行第一列

####### \.count\(\) 记录数量

##### 
